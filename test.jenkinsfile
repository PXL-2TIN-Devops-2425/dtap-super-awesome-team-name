pipeline {
    agent any
    environment {
        // DockerHub credentials are injected using Jenkins credentials store
        DOCKER_CREDENTIALS = credentials('dockerhub-credentials')  // Ensure this matches your Jenkins credentials ID
    }
    tools {
        nodejs 'testenvnode'  // Use the global Node.js configuration named 'testenvnode'
    }
    stages {
        // Stage 1: Cleanup - Remove all files in the workspace to start fresh
        stage('Cleanup') {
            steps {
                echo 'Cleaning up workspace...'
                sh 'rm -rf *'  // Remove all files in the workspace directory
            }
        }

        // Stage 2: Clone Repository - Fetch the application code from the repository
        stage('Clone Repository') {
            steps {
                echo 'Cloning repository...'
                git branch: 'main',
                    credentialsId: 'github',  // Ensure the GitHub credentials ID is correct
                    url: 'https://github.com/RikVangeelPXL/calculator-app-finished.git'
            }
        }

        // Stage 3: Install Dependencies - Install the required npm dependencies
        stage('Install Dependencies') {
            steps {
                echo 'Installing dependencies...'
                sh 'npm install'  // Run 'npm install' to install dependencies
            }
        }

        // Stage 4: Build Artifact - Build the Docker image for the application
        stage('Build Artifact') {
            steps {
                echo 'Building Docker image...'
                withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', 
                                                  usernameVariable: 'DOCKER_USERNAME', 
                                                  passwordVariable: 'DOCKER_PASSWORD')]) {
                    echo "Using DockerHub username: ${DOCKER_USERNAME}"  // Debugging line to confirm the username is set
                    sh '''
                    echo "$DOCKER_PASSWORD" | docker login -u $DOCKER_USERNAME --password-stdin
                    DOCKER_BUILDKIT=0 docker build --no-cache -t $DOCKER_USERNAME/calculator-app .  // Force non-buildx builder
                    '''
                }
            }
        }

        // Stage 5: Push Artifact - Push the Docker image to DockerHub
        stage('Push Artifact') {
            steps {
                echo 'Pushing Docker image to DockerHub...'
                withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', 
                                                  usernameVariable: 'DOCKER_USERNAME', 
                                                  passwordVariable: 'DOCKER_PASSWORD')]) {
                    echo "Using DockerHub username: ${DOCKER_USERNAME}"  // Debugging line to confirm the username is set
                    sh '''
                    echo "$DOCKER_PASSWORD" | docker login -u $DOCKER_USERNAME --password-stdin
                    docker push $DOCKER_USERNAME/calculator-app  // Push the image to DockerHub
                    '''
                }
            }
        }

        // Stage 6: Deploy on Testserver - Start the Docker container on the test server
        stage('Deploy on Testserver') {
            steps {
                echo 'Deploying on testserver...'
                withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', 
                                                  usernameVariable: 'DOCKER_USERNAME', 
                                                  passwordVariable: 'DOCKER_PASSWORD')]) {
                    echo "Using Docker image: $DOCKER_USERNAME/calculator-app"  // Debugging line to confirm the correct image name
                    sh '''
                    docker stop calculator-app || true  // Stop the old container if running
                    docker rm calculator-app || true  // Remove the old container
                    docker run -d -p 3000:3000 --name calculator-app $DOCKER_USERNAME/calculator-app  // Start the new container
                    '''
                }
            }
        }
    }
}
